#pragma once

#include <memory>

/*!
 * @brief A namespace that accumulates all the work with JSON.
 */
namespace bot::jsonUtils
{
/*!
 * @brief Send message to chat with attachment list.
 * @param type        - type of attachment(name of method: <b>photos.search</b>, <b>video.search</b>, <b>docs.search</b>).
 * @param keyword     - search query.
 * @param peer_id     - id of chat.
 * @return Empty string on success, error message otherwise.
 */
std::string sendRandomMedia(std::string_view type, std::string_view keyword, long peer_id);
/*!
 * @brief Get list of all chat members and pick random one.
 * @param peer_id     - id of chat.
 * @return First name + Last name of one user.
 */
std::string pickRandomChatUser(long peer_id);
/*!
 * @param peer_id     - id of chat.
 * @return List of online users in current conversation.
 */
std::string getOnlineUsers(long peer_id);
/*!
 * @return Completed text generated by <em><b>https://pelevin.gpt.dobro.ai/generate/</b></em>.
 */
std::string completeText(std::string_view text);
/*!
 * @brief Download and upload to VK random cat image from <em><b>https://api.thecatapi.com/v1/images/search</b></em>.
 * @param peer_id     - id of chat.
 * @return Empty string on success, error message otherwise.
 */
std::string uploadCatImage(long peer_id);
/*!
 * @return Formatted result of <em><b>https://www.cbr-xml-daily.ru/daily_json.js</b></em> API work.
 */
std::string getCurrencyList();
}
